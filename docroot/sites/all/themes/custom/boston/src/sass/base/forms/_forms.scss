// Form defaults
//
// These are the default base styles applied to HTML form elements.
//
// Component classes can override these styles, but if no class applies a style
// to an HTML form element, these styles will be the ones displayed.
//
// Weight: -1
//
// Style guide: forms.base

//
// The following 8 rules are from normalize.css and help to fix inconsistencies
// across various browsers. You should probably leave these rules as is and jump
// to the "Buttons" rule on line 105 before you start editing this file.
//

button,
input,
optgroup,
select,
textarea {
  // Keep form elements constrained in their containers.
  @include box-sizing(border-box);
  max-width: 100%;
  // Correct color not being inherited.
  // Known issue: affects color of disabled elements.
  color: inherit;
  // Correct font properties not being inherited.
  font: inherit;
  // Address margins set differently in Firefox 4+, Safari, and Chrome.
  margin: 0;
}

// Address `overflow` set to `hidden` in IE 8/9/10/11.
button {
  overflow: visible;
}

// Address inconsistent `text-transform` inheritance for `button` and `select`.
// All other form control elements do not inherit `text-transform` values.
// Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
// Correct `select` style inheritance in Firefox.
button,
select {
  text-transform: none;
}

// Remove inner padding and border in Firefox 4+.
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

// Add general input styles
input {
  color: color(input);
  border: 3px solid;
  padding: 5px 15px;
  height: 65px;

  &::-webkit-input-placeholder {
    color: color(input-placeholder);
    font-style: italic;
    line-height: 1;
  }

  &:-moz-placeholder { /* Firefox 18- */
    color: color(input-placeholder);
    font-style: italic;
    line-height: 1;
  }

  &::-moz-placeholder {  /* Firefox 19+ */
    color: color(input-placeholder);
    font-style: italic;
    line-height: 1;
  }

  &:-ms-input-placeholder {
    color: color(input-placeholder);
    font-style: italic;
    line-height: 1;
  }
}

// The following selector is made up until there is real code to work with
input.error {
  border-color: color(input-error);
}
.input-error-mssg {
  color: color(input-error);
}

// 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
//    and `video` controls.
// 2. Correct inability to style clickable `input` types in iOS.
html input[type="button"], // 1
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; // 2
}

// Fix the cursor style for Chrome's increment/decrement buttons. For certain
// `font-size` values of the `input`, it causes the cursor style of the
// decrement button to change from `default` to `text`.
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

input[type="search"] {
  // Address `appearance` set to `searchfield` in Safari and Chrome.
  -webkit-appearance: textfield;

  // Remove inner padding and search cancel button in Safari and Chrome on OS X.
  // Safari (but not Chrome) clips the cancel button when the search input has
  // padding (and `textfield` appearance).
  &::-webkit-search-cancel-button,
  &::-webkit-search-decoration {
    -webkit-appearance: none;
  }
}

// Buttons
//
// Buttons built with the `<button>` element are the most flexible for styling
// purposes. But `<input>` elements with `type` set to `submit`, `image`,
// `reset`, or `button` are also supported.
//
// Below is the default button styling. To see variations on the button styling
// see the [button component](section-forms.html#kssref-forms-button).
//
// :hover        - Hover styling.
// :active:hover - Depressed button styling.
//
// Markup: forms-button.hbs
//
// Style guide: forms.base.button

button,
[type="button"],
[type="reset"],
[type="submit"] {
  @extend %button;
}

// The %text-form-element can be used to style `<input>` text types and
// `<textarea>` elements at the same time.
%text-form-element {
  // Address Firefox 4+ setting `line-height` on `input` using `!important` in
  // the UA stylesheet.
  line-height: inherit;

  // Add your styles.
}

// Inputs
//
// The `<input>` element is mostly used for text-based inputs that include the
// HTML5 types: `text`, `search`, `tel`, `url`, `email`, `password`, `date`,
// `time`, `number`, `range`, `color`, and `file`.
//
// Markup: forms-input.hbs
//
// Style guide: forms.base.input

input {
  &[type="text"],
  &[type="search"],
  &[type="tel"],
  &[type="url"],
  &[type="email"],
  &[type="password"],
  &[type="date"],
  &[type="time"],
  &[type="number"] {
    @extend %text-form-element;
  }

  &[type="range"] {
    // Add your styles.
  }

  &[type="color"] {
    // Add your styles.
  }

  &[type="file"] {
    // Add your styles.
  }
}

// Checkboxes
//
// If an `<input>` element has the `type="checkbox"` attribute set, the form
// field is displayed as a checkbox.
//
// It's recommended that you don't attempt to style these elements. Firefox's
// implementation doesn't respect `box-sizing`, `padding`, or `width`.
//
// Markup: forms-input-checkbox.hbs
//
// Style guide: forms.base.input-checkbox

// Radio buttons
//
// If an `<input>` element has the `type="radio"` attribute set, the form field
// is displayed as a radio button.
//
// It's recommended that you don't attempt to style these elements. Firefox's
// implementation doesn't respect `box-sizing`, `padding`, or `width`.
//
// Markup: forms-input-radio.hbs
//
// Style guide: forms.base.input-radio

input[type="checkbox"],
input[type="radio"] {
  @if support-legacy-browser(ie, '10') {
    // Address box sizing set to `content-box` in IE 8/9/10.
    @include box-sizing(border-box);
    // Remove excess padding in IE 8/9/10.
    padding: 0;
  }
  // Hiding to replace for styling purposes
  display: none;
}

// replaces checkboxes and radiobuttons
.form-type-radio label:before,
.form-type-checkbox label:before,
.form-type-bef-checkbox label:before{
  content: "";
  display: inline-block;
  width: 39px;
  height: 39px;
  border: 3px solid color(input);
  float: left;
  margin-right: 1em;
}
.form-type-bef-checkbox label:before{
  margin-top: 34px;
  transform: translateY(-100%);
}


// Border color for errored fields
.form-type-radio.error label:before,
.form-type-checkbox.error label:before,
.form-type-bef-checkbox.error label:before{
  border-color: color(input-error);
  background-color: transparent;
}

// Border color for disabled buttons
.form-type-radio.disabled label:before,
.form-type-checkbox.disabled label:before,
.form-type-bef-checkbox.disabled label:before{
  border-color: color(input-disabled);
  background-color: color(input-disabled-bg);
}

// Makes radio buttons round
.form-type-radio label:before {
  border-radius: 100%;
}

// Styles for selected radio button
input[type=radio]:checked + label:before {
  content: "";
  color: color(input-checked);
  background: url('../img/radio_fill.png') no-repeat center center transparent;
}

// Styles for selected checkboxes
input[type=checkbox]:checked + label:before {
  content: "";
  color: color(input-checked);
  background: url('../img/check-mark-dark.png') no-repeat center center transparent;
}

// Border color for disabled buttons
input[type=radio].disabled + label:before,
input[type=checkbox].disabled + label:before {
  border-color: color(input-disabled);
  background-color: color(input-disabled-bg);
}

// Border color for errored fields
input[type=radio].error + label:before,
input[type=checkbox].error + label:before {
  border-color: color(input-error);
  background-color: transparent;
}

// Fieldsets
//
// The `<fieldset>` element groups a set of form fields, optionally under a
// common name given by the `<legend>` element.
//
// Markup: forms-fieldset.hbs
//
// Style guide: forms.base.fieldset

fieldset {
  // Apply borders and padding that keep the vertical rhythm.
  @include padding(.35 .625 .65);
  border: 1px solid color(border);
  // Define consistent border, margin, and padding.
  margin: 0 2px;
}

legend {
  // Correct `color` not being inherited in IE 8/9/10/11.
  @if support-legacy-browser(ie, '11') {
    border: 0;
  }
  // Align legend text with a fieldset's text while removing left padding so
  // people aren't caught out if they zero out fieldset padding.
  margin-left: -5px;
  padding: 0 5px;
}

// Labels
//
// The `<label>` element represents a caption of a form field. The label can be
// associated with a specific form control by using the `for` attribute or by
// putting the form control inside the label element itself.
//
// Markup: forms-label.hbs
//
// Style guide: forms.base.label

label {
  // Drupal-style form labels.
  display: block;
  color: color(input);
}

label {
  font-family: $montserrat;
  text-transform: uppercase;
  font-weight: 400;
  // line-height: 1;
  @include type-layout(13.5px, .1);
  @include margin(.75 0 .25 0);
  letter-spacing: 1px;
}

.input-error-mssg  {
  font-family: $montserrat;
  text-transform: uppercase;
  font-weight: 400;
  // line-height: 1;
  @include type-layout(xs, .5);
  @include margin(.15 0 .25 0);
  letter-spacing: 1px;
}

// Changes label styles to work with radio buttons and checkboxes
.form-type-radio label,
.form-type-checkbox label {
    display: inline-block;
    cursor: pointer;
    position: relative;
    line-height: 39px;
    margin: 0;
}
.form-type-bef-checkbox label {
  line-height: 1rem;
}
.form-type-bef-checkbox {
    clear: both;
}

.input-error-mssg  {
  color: color(input-error);
}

// Select list
//
// The `<select>` element represents a form field for selecting amongst a set of
// options.
//
// Known limitation: by default, Chrome and Safari on OS X allow very limited
// styling of `<select>`, unless a `border` property is set.
//
// Markup: forms-select.hbs
//
// Style guide: forms.base.select

// Styling for repacement code from easydropdowns plugin

.page{

  .dropdown,
  .dropdown div,
  .dropdown li,
  .dropdown div::after,
  .dropdown .carat,
  .dropdown .carat:after,
  .dropdown .selected::after,
  .dropdown:after {
    transition: all 150ms ease-in-out;
  }

  .dropdown .selected::after,
  .dropdown.scrollable div::after {
    pointer-events: none;
  }

  /* WRAPPER */

  .dropdown {
    position: relative;
    width: 250px;
    cursor: pointer;
    font-weight: 200;
    background: color(select-bg);
    border: 3px solid color(input);
    padding: 5px 0;
    font-family: $montserrat;
    user-select: none;
  }

  .dropdown.open {
    z-index: 2;
  }

  .dropdown:hover {
    background: color(select-bg);
  }

  .dropdown:after {
    content: '';
    position: absolute;
    right: 0;
    bottom: 0;
    top: 0;
    width: 45px;
    background: color(select-bg-carat);
    border-left: 3px solid color(input);
    text-align: center;
  }

  /* CARAT */

  .dropdown .carat,
  .dropdown .carat:after {
    content: '';
    position: absolute;
    right: 15px;
    top: 50%;
    margin-top: -4px;
    border: 8px solid transparent;
    border-top: 8px solid #000;
    z-index: 2;
    transform-origin: 50% 20%;
  }

  .dropdown .carat:after {
    margin-top: -10px;
    right: -8px;
    border-top-color: color(select-bg-carat);
  }

  .dropdown.focus .carat {
    border-top-color: color(input);
  }

  .dropdown.focus .carat:after {
    border-top-color: color(select-bg-carat);
  }

  .dropdown.open .carat {
    transform: rotate(180deg);
  }

  /* OLD SELECT (HIDDEN) */

  .dropdown .old {
    position: absolute;
    left: 0;
    top: 0;
    height: 0;
    width: 0;
    overflow: hidden;
  }

  .dropdown select {
    position: absolute;
    left: 0px;
    top: 0px;
  }

  .dropdown.touch .old {
    width: 100%;
    height: 100%;
  }

  .dropdown.touch select {
    width: 100%;
    height: 100%;
    opacity: 0;
  }

  /* SELECTED FEEDBACK ITEM */

  .dropdown .selected,
  .dropdown li {
    display: block;
    line-height: 1;
    color: #000;
    padding: 9px 12px;
    overflow: hidden;
    white-space: nowrap;
    background-image: none;
  }

  .dropdown .selected {
    font-family: $lora;
    color: color(input);
  }

  .dropdown .placeholder {
    color: color(input-placeholder);
    font-style: italic;
  }

  .dropdown .selected::after{
    content: '';
    position: absolute;
    right: 0;
    top: 0;
    bottom: 0;
    width: 60px;
    border-radius: 0 2px 2px 0;
  }

  .dropdown .placeholder {
    font-family: $lora;
    font-style: italic;
    color: color(input-placeholder);
  }

  /* DROP DOWN WRAPPER */

  .dropdown div {
    position: absolute;
    height: 0;
    left: 0;
    right: 0;
    top: 100%;
    background: color(select-bg);
    overflow: hidden;
    opacity: 0;
    border: 3px solid color(input);
    @include margin(-1px -3px 0);
  }

  /* Height is adjusted by JS on open */

  .dropdown.open div {
    opacity: 1;
    z-index: 2;
  }

  /* FADE OVERLAY FOR SCROLLING LISTS */

  .dropdown.scrollable div::after {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 50px;
  }

  .dropdown.scrollable.bottom div::after {
    opacity: 0;
  }

  /* DROP DOWN LIST */

  .dropdown ul {
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 100%;
    list-style: none;
    overflow: hidden;
    @include margin(0);
  }

  .dropdown.scrollable.open ul {
    overflow-y: auto;
  }

  /* DROP DOWN LIST ITEMS */

  .dropdown li {
    list-style: none;
    padding: 8px 12px;
    @include margin(0);
    border-bottom: 3px solid color(input);
    padding: 5px 15px;
    // line-height: inherit;
    color: color(select-list-item);
    text-transform: uppercase;
    @include type-layout(xs);
    line-height: inherit;
    background-color: color(select-bg);
    text-indent: 0;
  }

  .dropdown li:last-child {
    border-bottom: 0;
    padding-bottom: 8px;
  }

  .dropdown li:before {
    content: "";
    display: none;
  }

  /* .focus class is also added on hover */

  .dropdown li.focus {
    background: color(select-bg-hover);
    position: relative;
    z-index: 3;
    color: color(text-bg);
  }

  .dropdown li.active {
    background: color(select-bg-hover);
    color: color(text-bg);
  }

}

// Text areas
//
// The `<textarea>` element represents a multi-line plain text form field.
//
// Markup: forms-textarea.hbs
//
// Style guide: forms.base.textarea

textarea {
  @extend %text-form-element;
  // Remove default vertical scrollbar in IE 8/9/10/11.
  overflow: auto;
}
